{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","mail","message","formData","setFormData","disable","setdisable","Error","setError","submit","setsubmit","firstRender","useRef","useEffect","current","formValidation","handleChange","e","target","value","className","method","onSubmit","preventDefault","console","table","htmlFor","type","onChange","style","color","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6PA4FeA,MAzFf,WAAgB,IAAD,EACmBC,mBAAS,CACrCC,KAAK,GACLC,KAAK,GACLC,QAAQ,KAJC,mBACNC,EADM,KACIC,EADJ,OAOiBL,oBAAS,GAP1B,mBAONM,EAPM,KAOGC,EAPH,OAQaP,mBAAS,MARtB,mBAQNQ,EARM,KAQCC,EARD,OASeT,oBAAS,GATxB,mBASNU,EATM,KASEC,EATF,KAUPC,EAAcC,kBAAO,GAE3BC,qBAAU,WACR,IAAIF,EAAYG,QAKhB,OADAR,EAAWS,KACJ,aAJLJ,EAAYG,SAAU,IAMvB,CAACX,IACJ,IAAMY,EAAiB,WACrB,MAAqB,KAAlBZ,EAASH,MACVQ,EAAS,sBACF,GAEiB,KAAlBL,EAASF,MACfO,EAAS,wBACF,GAEoB,KAArBL,EAASD,SACfM,EAAS,yBACF,IAGPA,EAAS,OACF,IAULQ,EAAe,SAACC,GAAM,IAAD,EACHA,EAAEC,OAAjBlB,EADkB,EAClBA,KAAMmB,EADY,EACZA,MACbf,EAAY,2BACPD,GADM,kBAERH,EAAMmB,MAGX,OACE,yBAAKC,UAAU,OACZ,6BACC,0BAAMC,OAAO,OAAOC,SAfL,SAACL,GACpBA,EAAEM,iBACFb,GAAU,GACVc,QAAQC,MAAMtB,KAaN,0CACA,yBAAKiB,UAAU,YACX,2BAAOM,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAO3B,KAAK,OAAO4B,SAAUZ,KAE7C,yBAAKI,UAAU,YACX,2BAAOM,QAAQ,SAAf,YACA,2BAAOC,KAAK,QAAQ3B,KAAK,OAAO4B,SAAUZ,KAE9C,yBAAKI,UAAU,YACX,2BAAOM,QAAQ,WAAf,aACA,8BAAU1B,KAAK,UAAW4B,SAAUZ,KAExC,yBAAKa,MAAO,CAACC,MAAM,QAChBvB,GAAS,2BAAIA,IAEhB,yBAAKa,UAAU,YACX,2BAAOO,KAAK,SAASI,SAAU1B,OAItCI,GACC,6BACE,2BAAIN,EAASH,KAAb,+BACA,sCAAYG,EAASF,MACrB,sCAAYE,EAASD,YCzEb8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAM/C,c","file":"static/js/main.53bdaf80.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [formData, setFormData] = useState({\n      name:'',\n      mail:'',\n      message:''\n    })\n\n  const [disable, setdisable] = useState(true);\n  const [Error, setError] = useState(null);\n  const [submit, setsubmit] = useState(false)\n  const firstRender = useRef(true)\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false\n      return\n    }\n    setdisable(formValidation());\n    return () => {\n    }\n  }, [formData])\n  const formValidation = () =>{\n    if(formData.name === \"\"){\n      setError('Plase Enter Name.');\n      return true\n    }\n    else if(formData.mail === \"\"){\n      setError('Plase Enter E-mail.');\n      return true\n    }\n    else if(formData.message === \"\"){\n      setError('Plase Enter Message.');\n      return true\n    }\n    else{\n      setError(null);\n      return false\n    }\n    \n  }\n\n  const handleSubmit = (e)=>{\n    e.preventDefault()\n    setsubmit(true)\n    console.table(formData)\n  }\n  const handleChange = (e) =>{\n    const {name, value} = e.target;\n    setFormData({\n      ...formData,\n      [name]:value\n    })\n  }\n  return (\n    <div className=\"App\">\n       <div>\n        <form method='POST' onSubmit={handleSubmit}>\n            <h1>Contact Us</h1>\n            <div className='form-row'>\n                <label htmlFor='Name'>Name: </label>\n                <input type='text' name='name' onChange={handleChange} />\n            </div>\n            <div className='form-row'>\n                <label htmlFor='Email'>E-mail: </label>\n                <input type='email' name='mail' onChange={handleChange} />\n            </div>\n            <div className='form-row'>\n                <label htmlFor='Message'>Message: </label>\n                <textarea name='message'  onChange={handleChange}></textarea>\n            </div>\n            <div style={{color:'red'}}>\n              {Error && <p>{Error}</p>}\n            </div>\n            <div className='form-row'>\n                <input type='submit' disabled={disable}/>\n            </div>\n        </form>\n        </div>\n        {submit && \n          <div>\n            <p>{formData.name} your details has summited.</p>\n            <p>E-Mail :{formData.mail}</p>\n            <p>Message:{formData.message}</p>\n          </div>\n        }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}